points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
for(h in range(1:10000)){
for(i in range(1:5)){
a <- rnorm(10)
b <- rnorm(10)
t <- t.test(a,b)
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
for(h in range(1:10000)){
for(i in range(1:5)){
a <- rnorm(10)
b <- rnorm(10)
t <- t.test(a,b)
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
event[h] <- sum(points)
}
}
mean(event)
for(h in range(1:10000)){
for(i in range(1:5)){
a <- rnorm(10)
b <- rnorm(10)
t <- t.test(a,b)
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
rm(list = ls())
points <- numeric(5)
event <- numeric(10000)
for(h in range(1:10000)){
for(i in range(1:5)){
a <- rnorm(10)
b <- rnorm(10)
t <- t.test(a,b)
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
for(h in range(1:10000)){
for(i in range(1:5)){
a <- rnorm(10)
b <- rnorm(10)
t <- t.test(a,b)
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
for(h in range(1:10000)){
for(i in range(1:5)){
a <- rnorm(10)
b <- rnorm(10)
t <- t.test(a,b)
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
a
b
a <- rnorm(10)
b <- rnorm(10)
a
b
mean(a)
mean(b)
t <- t.test(a,b)
t
t <- t.test(rnorm(10),rnorm(10, var.equal=TRUE))
# type I error
alpha.p <- 0.05
# number of simulations
n.simulations <- 1000
# number of observations in each simulation
n.obs <- 100
# a vector of test results
type.one.error<-replicate(n.simulations, t.test(rnorm(n.obs),rnorm(n.obs),
var.equal=TRUE)$p.value)
# type I error for the whole simulation
mean(type.one.error)
type.one.error
# type I error
alpha.p <- 0.05
# number of simulations
n.simulations <- 1000
# number of observations in each simulation
n.obs <- 10
# a vector of test results
type.one.error<-replicate(n.simulations, t.test(rnorm(n.obs),rnorm(n.obs),
var.equal=TRUE)$p.value)
# type I error for the whole simulation
mean(type.one.error)
# Over alpha
type.one.error.alpha <- type.one.error < alpha.p
mean(type.one.error.alpha)
# event
event <- numeric(10000)
for (i in range(1:1000)){
print(i)
}
for (i in range(1,1000)){
print(i)
}
for (i in (1:1000)){
print(i)
}
points <- numeric(5)
event <- numeric(10000)
for(h in (1:10000)){
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10, var.equal=TRUE))
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
points <- numeric(5)
event <- numeric(10000)
for(h in (1:10000)){
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
# event
event <- numeric(10000)
points <- numeric(5)
event <- numeric(10000)
for(h in (1:10000)){
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
mean(event)
mean(event)
event
rm(list = ls())
points <- numeric(5)
event <- numeric(1000)
for(h in (1:1000)){
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
points
t
t$p.value
t$p.value < 0.05
event <- numeric(1000)
for(h in (1:1000)){
for(i in (1:5)){
points <- numeric(5)
t <- t.test(rnorm(10),rnorm(10))
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
event <- numeric(1000)
for(h in (1:1000)){
for(i in (1:5)){
points <- numeric(5)
t <- t.test(rnorm(10),rnorm(10))
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
points
event <- numeric(1000)
for(h in (1:1000)){
points <- numeric(5)
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
event <- numeric(1000)
for(h in (1:1000)){
points <- numeric(5)
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$statistic < 0 & t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
event <- numeric(1000)
for(h in (1:1000)){
points <- numeric(5)
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$statistic < 0 & t$p.value < 0.05) {
print("It happened!")
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
rm(list = ls())
event <- numeric(1000)
for(h in (1:1000)){
points <- numeric(5)
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$statistic < 0 & t$p.value < 0.05) {
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
event <- numeric(10000)
for(h in (1:10000)){
points <- numeric(5)
for(i in (1:5)){
t <- t.test(rnorm(10),rnorm(10))
if(t$statistic < 0 & t$p.value < 0.05) {
points[i] <- 1
}
}
event[h] <- sum(points)
}
mean(event)
# Make a plot of the slope, lapse, and PC components for all the data we have so far
library(ggplot2)
library(tidyr)
library(ggExtra)
library(ggpubr)
rm(list = ls())
# Load in the data
setwd("/home/eobrien/bde/Projects/Parametric/Speech/Analysis")
psychometrics <- read.csv("../cleaned_psychometrics.csv")
# Do PCA
params <- psychometrics[,4:7]
PCA<- prcomp(params, scale=TRUE)
psychometrics <- cbind(psychometrics, PCA$x)
# Estimate the lapse rate
psychometrics$lapse_rate <- with(psychometrics, (lo_asymp + hi_asymp) / 2)
# Get the composite reading score
psychometrics$read <- (psychometrics$wj_brs + psychometrics$twre_index)/2
# Melt the dataframe
psych_sub <- psychometrics %>%
dplyr::select(c("duration","subject_id", "read","slope","lapse_rate","PC1"))
psych_sub <- gather(psych_sub, condition, measurement, slope:PC1, factor_key = TRUE)
# Formatting for plotting
psych_sub$duration <- as.factor(psych_sub$duration)
levels(psych_sub$duration) = c("100 ms", "300 ms")
levels(psych_sub$condition) = c("Slope", "Asymptote", "Principal\nComponent")
psych_sub$condition <- ordered(psych_sub$condition, levels = c("Principal\nComponent", "Slope", "Asymptote"))
# Dummy data
dummy = data.frame(reading_score=80, condition=rep(c("Principal\nComponent", "Slope","Asymptote"), each=1),
value=c(1.2*max(psych_sub$measurement[psych_sub$condition=="Principal\nComponent"]),
1.2*max(psych_sub$measurement[psych_sub$condition=="Slope"]),
1.2*max(psych_sub$measurement[psych_sub$condition=="Asymptote"])))
px <- ggplot(psych_sub, aes(read, measurement))+
geom_point()+
geom_blank(data=dummy, aes(reading_score, value))+
facet_grid(condition ~ duration, scales = "free_y" )+
geom_smooth(method = "lm", aes(colour = duration),size = 1.5, alpha = 0.6)+
#scale_color_manual(values = c("tomato3","turquoise3"))+
scale_color_brewer(palette = "Set1")+
theme_bw()+
xlab("Reading Score")+
ylab("Parameter Estimate")+
stat_cor(label.y.npc = "top",label.x.npc = "left")+
theme(axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
strip.text = element_text(size = 18),
legend.position="none")
px
ggsave("parameter_relationships.pdf", px,
device=cairo_pdf, width=6, height=8)
ggsave("parameter_relationships.png", px,
width=6, height=8)
#############################################################################
effects <- reshape(psychometrics, idvar = "subject_id", timevar = "duration", direction = "wide")
effect <- effects %>%
dplyr::group_by(subject_id)%>%
dplyr::summarise(fx = PC1.300 - PC1.100,
read = unique(read.300))
effect$group <- with(effect, ifelse(read <= 85, "Dyslexic",
ifelse(read > 100, "Above Average",
"Below Average")))
effect <- na.omit(effect)
my_palette = c(brewer.pal(3, "Set1"))
px <- ggplot(effect, aes(read, fx))+
geom_point(size = 3, alpha = 0.8)+
theme_bw()+
geom_smooth(method = "lm", color = my_palette[3], size = 2)+
theme(legend.position = "left",
axis.title = element_text(size = 20),
axis.text = element_text(size = 16))+
xlab("Reading Score")+
ylab("Within-subject difference in PC1\n(300 ms - 100 ms)")+
guides(color =guide_legend(title="Group"))+
stat_cor(label.y.npc = "top",label.x.npc = "right", size = 5)
px
effect <- na.omit(effect)
my_palette = c(brewer.pal(3, "Set1"))
library(RColorBrewer)
effect <- na.omit(effect)
my_palette = c(brewer.pal(3, "Set1"))
px <- ggplot(effect, aes(read, fx))+
geom_point(size = 3, alpha = 0.8)+
theme_bw()+
geom_smooth(method = "lm", color = my_palette[3], size = 2)+
theme(legend.position = "left",
axis.title = element_text(size = 20),
axis.text = element_text(size = 16))+
xlab("Reading Score")+
ylab("Within-subject difference in PC1\n(300 ms - 100 ms)")+
guides(color =guide_legend(title="Group"))+
stat_cor(label.y.npc = "top",label.x.npc = "right", size = 5)
px
View(psych_sub)
View(effects)
View(effect)
# Melt the dataframe
psych_sub2 <- psychometrics %>%
dplyr::select(c("duration","subject_id", "read","slope","lapse_rate","PC1"))
View(psych_sub2)
View(psych_sub)
# Melt the dataframe
psych_sub2 <- psychometrics %>%
dplyr::select(c("duration","subject_id", "read","slope","lapse_rate","PC1"))%>%
spread(duration,.)
# Melt the dataframe
psych_sub2 <- psychometrics %>%
dplyr::select(c("duration","subject_id", "read","slope","lapse_rate","PC1"))%>%
spread()
# Melt the dataframe
psych_sub2 <- psychometrics %>%
dplyr::select(c("duration","subject_id", "read","slope","lapse_rate","PC1"))%>%
spread(duration, subject_id)
# Melt the dataframe
psych_sub2 <- psychometrics %>%
dplyr::select(c("duration","subject_id", "read","slope","lapse_rate","PC1"))%>%
spread(subject_id,duratin)
# Melt the dataframe
psych_sub2 <- psychometrics %>%
dplyr::select(c("duration","subject_id", "read","slope","lapse_rate","PC1"))%>%
spread(subject_id,duration)
# Melt the dataframe
psych_sub2 <- psych_sub %>%
spread(duration, measurement)
psych_sub2$Effect <- psych_sub2$`300 ms` - psych_sub2$`100 ms`
psych_sub3 <- gather(psych_sub2, condition, measurement, `100 ms`:Effect, factor_key = TRUE)
View(psych_sub3)
psych_sub3 <- gather(psych_sub2, duration, measurement, `100 ms`:Effect, factor_key = TRUE)
px <- ggplot(psych_sub3, aes(read, measurement))+
geom_point()+
geom_blank(data=dummy, aes(reading_score, value))+
facet_grid(condition ~ duration, scales = "free_y" )+
geom_smooth(method = "lm", aes(colour = duration),size = 1.5, alpha = 0.6)+
#scale_color_manual(values = c("tomato3","turquoise3"))+
scale_color_brewer(palette = "Set1")+
theme_bw()+
xlab("Reading Score")+
ylab("Parameter Estimate")+
stat_cor(label.y.npc = "top",label.x.npc = "left")+
theme(axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
strip.text = element_text(size = 18),
legend.position="none")
px
dummy = data.frame(reading_score=80, condition=rep(c("Principal\nComponent", "Slope","Asymptote"), each=1),
value=c(1.2*max(psych_sub3$measurement[psych_sub3$condition=="Principal\nComponent"]),
1.2*max(psych_sub3$measurement[psych_sub3$condition=="Slope"]),
1.2*max(psych_sub3$measurement[psych_sub3$condition=="Asymptote"])))
px <- ggplot(psych_sub3, aes(read, measurement))+
geom_point()+
geom_blank(data=dummy, aes(reading_score, value))+
facet_grid(condition ~ duration, scales = "free_y" )+
geom_smooth(method = "lm", aes(colour = duration),size = 1.5, alpha = 0.6)+
#scale_color_manual(values = c("tomato3","turquoise3"))+
scale_color_brewer(palette = "Set1")+
theme_bw()+
xlab("Reading Score")+
ylab("Parameter Estimate")+
stat_cor(label.y.npc = "top",label.x.npc = "left")+
theme(axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
strip.text = element_text(size = 18),
legend.position="none")
px
dummy
dummy = data.frame(reading_score=80, condition=rep(c("Principal\nComponent", "Slope","Asymptote"), each=1),
value=c(1.2*max(psych_sub3$measurement[psych_sub3$condition=="Principal\nComponent"], na.rm=TRUE),
1.2*max(psych_sub3$measurement[psych_sub3$condition=="Slope"], na.rm=TRUE),
1.2*max(psych_sub3$measurement[psych_sub3$condition=="Asymptote"]), na.rm = TRUE))
dummy = data.frame(reading_score=80, condition=rep(c("Principal\nComponent", "Slope","Asymptote"), each=1),
value=c(1.2*max(psych_sub3$measurement[psych_sub3$condition=="Principal\nComponent"], na.rm=TRUE),
1.2*max(psych_sub3$measurement[psych_sub3$condition=="Slope"], na.rm=TRUE),
1.2*max(psych_sub3$measurement[psych_sub3$condition=="Asymptote"], na.rm=TRUE)))
px <- ggplot(psych_sub3, aes(read, measurement))+
geom_point()+
geom_blank(data=dummy, aes(reading_score, value))+
facet_grid(condition ~ duration, scales = "free_y" )+
geom_smooth(method = "lm", aes(colour = duration),size = 1.5, alpha = 0.6)+
#scale_color_manual(values = c("tomato3","turquoise3"))+
scale_color_brewer(palette = "Set1")+
theme_bw()+
xlab("Reading Score")+
ylab("Parameter Estimate")+
stat_cor(label.y.npc = "top",label.x.npc = "left")+
theme(axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
strip.text = element_text(size = 18),
legend.position="none")
px
dummy = data.frame(reading_score=80, condition=rep(c("Principal\nComponent", "Slope","Asymptote"), each=1),
value=c(1.2*max(psych_sub3$measurement[psych_sub3$condition=="Principal\nComponent"], na.rm=TRUE),
1.2*max(psych_sub3$measurement[psych_sub3$condition=="Slope"], na.rm=TRUE),
1.3*max(psych_sub3$measurement[psych_sub3$condition=="Asymptote"], na.rm=TRUE)))
px <- ggplot(psych_sub3, aes(read, measurement))+
geom_point()+
geom_blank(data=dummy, aes(reading_score, value))+
facet_grid(condition ~ duration, scales = "free_y" )+
geom_smooth(method = "lm", aes(colour = duration),size = 1.5, alpha = 0.6)+
#scale_color_manual(values = c("tomato3","turquoise3"))+
scale_color_brewer(palette = "Set1")+
theme_bw()+
xlab("Reading Score")+
ylab("Parameter Estimate")+
stat_cor(label.y.npc = "top",label.x.npc = "left")+
theme(axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
strip.text = element_text(size = 18),
legend.position="none")
px
dummy = data.frame(reading_score=80, condition=rep(c("Principal\nComponent", "Slope","Asymptote"), each=1),
value=c(1.3*max(psych_sub3$measurement[psych_sub3$condition=="Principal\nComponent"], na.rm=TRUE),
1.3*max(psych_sub3$measurement[psych_sub3$condition=="Slope"], na.rm=TRUE),
1.3*max(psych_sub3$measurement[psych_sub3$condition=="Asymptote"], na.rm=TRUE)))
px <- ggplot(psych_sub3, aes(read, measurement))+
geom_point()+
geom_blank(data=dummy, aes(reading_score, value))+
facet_grid(condition ~ duration, scales = "free_y" )+
geom_smooth(method = "lm", aes(colour = duration),size = 1.5, alpha = 0.6)+
#scale_color_manual(values = c("tomato3","turquoise3"))+
scale_color_brewer(palette = "Set1")+
theme_bw()+
xlab("Reading Score")+
ylab("Parameter Estimate")+
stat_cor(label.y.npc = "top",label.x.npc = "left")+
theme(axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
strip.text = element_text(size = 18),
legend.position="none")
px
ggsave("effect_duration2.png", px,
width=11.5, height=8)
